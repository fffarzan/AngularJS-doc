>>>> Directive:

==========================================================================

>> Define?

a) Markers on a DOM element (such as attribute, element name, comment, css class
,...).

==========================================================================

>> Types?

1- Buit-in: like ngbind/ngModel/ngClass ...
2- Custom: we can create our own directives.

==========================================================================

>> How to Work?

When AngularJS bootstraps the app, tell AngularJS's HTML compiler ($compile) 
to attach a specified behavior to that DOM element(via event listener) or 
transform the DOM element and its children.

Note: After compiling, `$compiler` try to match directives on the children.
This means we can use directives in other directives.

==========================================================================

>> "compile" HTML?

Mean attaching directive to the HTML to make it interactive.

==========================================================================

>> Matching Directives?

1st ex: we say `<input>` element matches the `ngModel` directive:
--First way: <input ng-model="foo">
--Second way: <input data-ng-model="foo">

2nd ex: `<person>` element matches `person` directive:
<person>{{name}}</person>
 
-->extra: (Element.matches())

==========================================================================

>> Normalization?

Normalizing element's tag and attribute name to determine which elements match
which directives by AngularJS.

Process:
1-Strip `x-` and `data-` from front of elems/attrs.
2-Convert `:`, `-`, `_` delimited name to camelClass.

ex:
ng-bind (Best Practice)
ng:bind
ng_bind
data-ng-bind (Best Practice for HTML validating tool)
x-ng-bind

==========================================================================

>> Custom Directive Types?

E: On element names ---> <my-dir></my-dir> ===> (Best Practice)
A: On attributes ---> <span my-dir="exp"></span> ===> (Best Practice)
C: On class names ---> <span class="my-dir: exp;"></span>
M: comments ---> <!-- directive: my-dir exp -->

Defining in directive definition object with `restrict` property.

Default: `EA`

ex: `AEC` ---> Matches either attribute, element or class.

attribute VS. element?
Use an element when you are creating a component that is in control of the
template. The common case for this is when you are creating a 
Domain-Specific Language for parts of your template. 
Use an attribute when you are decorating an existing element with new 
functionality.(???)

==========================================================================

>> Creating Directives?

a) Registering: 
1st: register on modules with `module.directive` API.
2nd: this API takes normalized directive name followed by a factory function.
3rd: The factory function should return an object to tell `$compie` how 
the directive should behave when natched.
4th: ???

==========================================================================

>> Template-expanding Directive?

Directive is an opportunity to simplify our template with preventing to put
same code blocks in the templates.

Types:
1st: in-lined
--ex:
  .directive('myCustomer', function() {
    return {
      template: 'Name: {{customer.name}} Address: {{customer.address}}'
  };

2nd: With templateUrl (Best Practice)
--ex:
  .directive('myCustomer', function() {
    return {
      templateUrl: 'my-customer.html'
  };

--Notes:
  1-`tempalteUrl` can be a function return the URL.
  2-AngularJS will call the `templateUrl` function with two parameters: 
    the `element` that the directive was called on, and an `attr` object 
    associated with that element.
  3-We can not access scope form `templateUrl` when the scope is not
    initialized. (at all in common!!)


==========================================================================

>> Isolating the scope of a directive?

What we want to be able to do is separate the scope inside a directive 
from the scope outside, and then map the outer scope to a directive's 
inner scope. ---> `isolate scope`
















